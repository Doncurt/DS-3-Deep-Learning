https://www.youtube.com/watch?v=wvWpdrfoEv0

Teacher bot gives the test
Tuner bot is the wieght update rule its the one that adjusts all of the nobs(wieghts) on each feature
-tuner bot adjusts the tuner bot( learning rate is the hyper parameter


- Learn one hot encoding -

- first get the shape to get the deminsionality) in this case 60000 features, that are 28 by 28
60,000 photos that are 28 by 28 and there are images for (red blue and yellow but must shape)

- Some neural networks take tensors and matrix, this doesnt so need to turn it into a vector( 1D)
- do this to turn it into array or list

============================================================

- For image classification  you'll need to use the 255 division for the colors in order normalize the image data(0,1) for processing, will result into values between 0 and 1

-http://scikit-learn.org/stable/modules/preprocessing.html

https://towardsdatascience.com/activation-functions-neural-networks-1cbd9f8d91d6

===========================================================
--ONE HOT VECTORS--
The one thing you are has a value and the others done...aka for 10 1=000000001

num_classes = 10
y_train = keras.utils.to_categorical(y_train, num_classes)
y_test = keras.utils.to_categorical(y_test, num_classes)

y_train[0] would usually equal 5 but after one hot encoding

array([0., 0., 0., 0., 0., 1., 0., 0., 0., 0.], dtype=float32)

For multi-class classification
=========================================
DO THE ACTIVATION FUCNTIONS ONE AT A TIME FOR HYPER PARAMETER TUNING
GET AN ACTUAL NOTEBOOK AND WRTE EVERYTHING DOWN, AS I CHANVE PARAMETERS WRONG IT DOWN

===========================================
https://keras.io/layers/core/#dense

acc= accuracy of training(TRAINING DATA)
loss= how wrong it was of training

val_los= How wrong it was on the test
vall_acc= test set(FINAL EXAM)

Train on 60000 samples, validate on 10000 samples
Epoch 1/10
60000/60000 [==============================] - 3s 50us/step - loss: 0.0288 - acc: 0.8363 - val_loss: 0.0143 - val_acc: 0.9133
Epoch 2/10
60000/60000 [==============================] - 4s 68us/step - loss: 0.0129 - acc: 0.9225 - val_loss: 0.0110 - val_acc: 0.9337
Epoch 3/10
60000/60000 [==============================] - 2s 41us/step - loss: 0.0104 - acc: 0.9367 - val_loss: 0.0094 - val_acc: 0.9410
Epoch 4/10
60000/60000 [==============================] - 3s 46us/step - loss: 0.0089 - acc: 0.9462 - val_loss: 0.0084 - val_acc: 0.9470
Epoch 5/10
60000/60000 [==============================] - 3s 49us/step - loss: 0.0079 - acc: 0.9527 - val_loss: 0.0077 - val_acc: 0.9522
Epoch 6/10
60000/60000 [==============================] - 3s 58us/step - loss: 0.0071 - acc: 0.9569 - val_loss: 0.0071 - val_acc: 0.9549
Epoch 7/10
60000/60000 [==============================] - 3s 51us/step - loss: 0.0064 - acc: 0.9615 - val_loss: 0.0068 - val_acc: 0.9567
Epoch 8/10
60000/60000 [==============================] - 3s 42us/step - loss: 0.0059 - acc: 0.9647 - val_loss: 0.0063 - val_acc: 0.9599
Epoch 9/10
60000/60000 [==============================] - 2s 41us/step - loss: 0.0055 - acc: 0.9674 - val_loss: 0.0060 - val_acc: 0.9612
Epoch 10/10
60000/60000 [==============================] - 3s 42us/step - loss: 0.0051 - acc: 0.9703 - val_loss: 0.0057 - val_acc: 0.9640

dense sets how many layer


